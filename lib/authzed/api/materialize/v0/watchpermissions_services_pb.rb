# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: authzed/api/materialize/v0/watchpermissions.proto for package 'authzed.api.materialize.v0'

require 'grpc'
require 'authzed/api/materialize/v0/watchpermissions_pb'

module Authzed
  module Api
    module Materialize
      module V0
        module WatchPermissionsService
          class Service

            include ::GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'authzed.api.materialize.v0.WatchPermissionsService'

            # WatchPermissions returns a stream of PermissionChange events for the given permissions.
            #
            # WatchPermissions is a long-running RPC, and will stream events until the client
            # closes the connection or the server terminates the stream. The consumer is responsible of
            # keeping track of the last seen revision and resuming the stream from that point in the event
            # of disconnection or client-side restarts.
            #
            # The API does not offer a sharding mechanism and thus there should only be one consumer per target system.
            # Implementing an active-active HA consumer setup over the same target system will require coordinating which
            # revisions have been consumed in order to prevent transitioning to an inconsistent state.
            #
            # Usage of WatchPermissions requires to be explicitly enabled on the service, including the permissions to be
            # watched. It requires more resources and is less performant than WatchPermissionsSets. It's usage
            # is only recommended when performing the set intersections of WatchPermissionSets in the client side is not viable
            # or there is a strict application requirement to use consume the computed permissions.
            rpc :WatchPermissions, ::Authzed::Api::Materialize::V0::WatchPermissionsRequest, stream(::Authzed::Api::Materialize::V0::WatchPermissionsResponse)
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
